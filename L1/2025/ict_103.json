{
  "courseId": "ICT103",
  "courseTitle": "Programmation en C",
  "chapters": [
    {
      "courseId": "ICT103",
      "courseTitle": "Programmation en C",
      "chapterId": "ch1",
      "chapterTitle": "Les bases solides en C",
      "lessons": [
        {
          "lessonId": "l1",
          "title": "Présentation du langage C",
          "content": [
            {
              "type": "title",
              "value": "Pourquoi apprendre le C en 2025 ?"
            },
            {
              "type": "text",
              "value": "Le langage **C** reste incontournable pour comprendre les fondements de la programmation. Il permet de maîtriser la mémoire, la compilation, et la logique algorithmique à bas niveau, des compétences précieuses pour tout développeur."
            },
            {
              "type": "note",
              "value": "Apprendre le C, c’est comprendre *comment fonctionne réellement un ordinateur*."
            },
            {
              "type": "title",
              "value": "Les points forts du C"
            },
            {
              "type": "text",
              "value": "• Portable et rapide\n• Utilisé dans les systèmes, les jeux, et les compilateurs\n• Base de nombreux autres langages (C++, Java, Go, etc.)"
            },
            {
              "type": "exercise",
              "value": "Écrivez un programme affichant votre prénom à l’écran."
            }
          ]
        },
        {
          "lessonId": "l2",
          "title": "Installation et configuration de l’environnement C",
          "content": [
            {
              "type": "title",
              "value": "Préparer votre environnement"
            },
            {
              "type": "text",
              "value": "Avant d’écrire votre premier programme, il faut un **compilateur** et un **éditeur**. Sur Ubuntu, installez GCC avec la commande `sudo apt install build-essential`. Sur Windows, utilisez **MSYS2** et installez `mingw-w64-x86_64-gcc`."
            },
            {
              "type": "note",
              "value": "Les outils de compilation transforment votre code en langage machine exécutable par le processeur."
            },
            {
              "type": "exercise",
              "value": "Vérifiez votre installation en exécutant `gcc --version` dans un terminal."
            }
          ]
        },
        {
          "lessonId": "l3",
          "title": "Structure minimale d’un programme C",
          "content": [
            {
              "type": "title",
              "value": "Comprendre la structure de base"
            },
            {
              "type": "text",
              "value": "Tout programme en C commence par la fonction `main`. C’est elle qui définit le point d’entrée du programme. Le code suivant affiche un simple message :"
            },
            {
              "type": "code",
              "language": "c",
              "value": "#include <stdio.h>\n\nint main(void) {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}"
            },
            {
              "type": "text",
              "value": "Chaque instruction doit se terminer par un `;`. Le `return 0;` indique au système que le programme s’est exécuté sans erreur."
            }
          ]
        }
      ]
    },
    {
      "courseId": "ICT103",
      "courseTitle": "Programmation en C",
      "chapterId": "ch2",
      "chapterTitle": "Les variables, les types et la mémoire",
      "lessons": [
        {
          "lessonId": "l1",
          "title": "Les variables et leur rôle",
          "content": [
            {
              "type": "title",
              "value": "Qu’est-ce qu’une variable ?"
            },
            {
              "type": "text",
              "value": "Une **variable** est une zone de mémoire nommée utilisée pour stocker une valeur. En C, vous devez *déclarer* le type de variable avant de l’utiliser."
            },
            {
              "type": "code",
              "language": "c",
              "value": "int age = 20;\nfloat temperature = 23.5;\nchar lettre = 'A';"
            },
            {
              "type": "note",
              "value": "Le mot-clé `int` indique que la variable stocke un entier, `float` un nombre à virgule, et `char` un caractère."
            },
            {
              "type": "title",
              "value": "Pourquoi le typage est-il important ?"
            },
            {
              "type": "text",
              "value": "Le typage permet au compilateur de réserver la bonne quantité de mémoire et d’éviter les erreurs lors de l’exécution. C’est aussi ce qui rend le C si performant."
            },
            {
              "type": "exercise",
              "value": "Créez une variable `prix` de type `float` et affichez-la avec `printf`."
            }
          ]
        },
        {
          "lessonId": "l2",
          "title": "Les types de données fondamentaux",
          "content": [
            {
              "type": "title",
              "value": "Les types les plus utilisés"
            },
            {
              "type": "text",
              "value": "Le C propose plusieurs types natifs :\n- `int` : entier (4 octets)\n- `float` : réel simple précision (4 octets)\n- `double` : réel double précision (8 octets)\n- `char` : caractère (1 octet)\n- `_Bool` : booléen (0 ou 1)"
            },
            {
              "type": "warning",
              "value": "En C, la taille d’un type peut légèrement varier selon le compilateur et la machine."
            },
            {
              "type": "note",
              "value": "Les **types dérivés** comme les tableaux ou pointeurs reposent sur ces types de base."
            },
            {
              "type": "exercise",
              "value": "Déclarez plusieurs variables de différents types et utilisez `printf` pour afficher leurs valeurs et leurs tailles avec `sizeof()`."
            }
          ]
        },
        {
          "lessonId": "l3",
          "title": "Introduction à la mémoire et aux pointeurs",
          "content": [
            {
              "type": "title",
              "value": "L’adresse mémoire"
            },
            {
              "type": "text",
              "value": "Chaque variable a une *adresse* en mémoire. Vous pouvez l’obtenir grâce à l’opérateur `&`."
            },
            {
              "type": "code",
              "language": "c",
              "value": "int age = 21;\nprintf(\"Adresse de age: %p\\n\", &age);"
            },
            {
              "type": "title",
              "value": "Les pointeurs"
            },
            {
              "type": "text",
              "value": "Un **pointeur** est une variable qui contient l’adresse d’une autre variable. Il est déclaré avec `*`."
            },
            {
              "type": "code",
              "language": "c",
              "value": "int age = 21;\nint *ptr = &age;\nprintf(\"Valeur pointée: %d\\n\", *ptr);"
            },
            {
              "type": "note",
              "value": "Les pointeurs sont puissants mais dangereux : une mauvaise manipulation peut causer des erreurs de segmentation."
            },
            {
              "type": "exercise",
              "value": "Écrivez un programme qui déclare une variable `note`, crée un pointeur vers elle, et affiche sa valeur et son adresse."
            }
          ]
        }
      ]
    }
  ]
}
